"use strict";(self.webpackChunkfresher_training_doc=self.webpackChunkfresher_training_doc||[]).push([[859],{8933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o="Event emitter",i={id:"Topics/event",title:"Event emitter",description:"Event emitter is a design pattern commonly used in software development to manage communication between different components or objects. In essence, it allows one part of a system to emit events, and other parts to listen for and respond to those events. This pattern decouples the emitter from the listener, making the code more modular, flexible, and scalable.",source:"@site/docs/Topics/3.event.md",sourceDirName:"Topics",slug:"/Topics/event",permalink:"/fresher-training-doc/docs/Topics/event",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Topics/3.event.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Object pool",permalink:"/fresher-training-doc/docs/Topics/pool"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"event-emitter",children:"Event emitter"})}),"\n",(0,s.jsx)(t.p,{children:"Event emitter is a design pattern commonly used in software development to manage communication between different components or objects. In essence, it allows one part of a system to emit events, and other parts to listen for and respond to those events. This pattern decouples the emitter from the listener, making the code more modular, flexible, and scalable."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'class EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n\n    on(event, listener) {\n        if (!this.events[event]) {\n            this.events[event] = [];\n        }\n        this.events[event].push(listener);\n    }\n\n    off(event, listener) {\n        if (this.events[event]) {\n            this.events[event] = this.events[event].filter(l => l !== listener);\n        }\n    }\n\n    emit(event, ...args) {\n        if (this.events[event]) {\n            this.events[event].forEach(listener => listener(...args));\n        }\n    }\n}\n\nclass Player extends EventEmitter {\n    constructor() {\n        super();\n        this.health = 100;\n        this.damage = 10;\n    }\n\n    attack(target) {\n        this.emit("attack", this, target);\n    }\n\n    takeDamage(damage) {\n        this.health -= damage;\n        this.emit("damaged", this, damage);\n        if (this.health <= 0) {\n            this.emit("death", this);\n        }\n    }\n}\n\nconst player = new Player();\nplayer.on("attack", (attacker, target) => {\n    // player attack target, play some sound effects\n});\nplayer.on("damaged", (player, damage) => {\n    // player take damage, show damage text and shake the screen\n});\nplayer.on("death", (player) => {\n    // player is dead, show lose screen\n});\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);