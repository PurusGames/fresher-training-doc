"use strict";(self.webpackChunkfresher_training_doc=self.webpackChunkfresher_training_doc||[]).push([[796],{2951:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Fresher Training Program","href":"/fresher-training-doc/docs/program","docId":"program","unlisted":false},{"type":"category","label":"2D Context","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/fresher-training-doc/docs/2D Context/introduction","docId":"2D Context/introduction","unlisted":false},{"type":"link","label":"Set-up an HTML5 canvas","href":"/fresher-training-doc/docs/2D Context/canvas-setup","docId":"2D Context/canvas-setup","unlisted":false},{"type":"link","label":"Draw shapes, paths and texts","href":"/fresher-training-doc/docs/2D Context/shapes-paths-text","docId":"2D Context/shapes-paths-text","unlisted":false},{"type":"link","label":"Game Loop","href":"/fresher-training-doc/docs/2D Context/game-loop","docId":"2D Context/game-loop","unlisted":false},{"type":"link","label":"Canvas animation","href":"/fresher-training-doc/docs/2D Context/canvas-animation","docId":"2D Context/canvas-animation","unlisted":false},{"type":"link","label":"Collision detection and physics","href":"/fresher-training-doc/docs/2D Context/physics","docId":"2D Context/physics","unlisted":false},{"type":"link","label":"Images and sprite animations","href":"/fresher-training-doc/docs/2D Context/animation","docId":"2D Context/animation","unlisted":false},{"type":"link","label":"Let\'s make a game","href":"/fresher-training-doc/docs/2D Context/make-a-game","docId":"2D Context/make-a-game","unlisted":false}]},{"type":"category","label":"WebGL","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/fresher-training-doc/docs/WebGL/introduction","docId":"WebGL/introduction","unlisted":false},{"type":"link","label":"Fundamentals","href":"/fresher-training-doc/docs/WebGL/webgl-funamentals","docId":"WebGL/webgl-funamentals","unlisted":false},{"type":"link","label":"How it works","href":"/fresher-training-doc/docs/WebGL/webgl-how-it-works","docId":"WebGL/webgl-how-it-works","unlisted":false},{"type":"link","label":"Image Processing","href":"/fresher-training-doc/docs/WebGL/webgl-image-processing","docId":"WebGL/webgl-image-processing","unlisted":false}]},{"type":"category","label":"Topics","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Vector","href":"/fresher-training-doc/docs/Topics/vector","docId":"Topics/vector","unlisted":false},{"type":"link","label":"Tween","href":"/fresher-training-doc/docs/Topics/tween","docId":"Topics/tween","unlisted":false},{"type":"link","label":"Object pool","href":"/fresher-training-doc/docs/Topics/pool","docId":"Topics/pool","unlisted":false},{"type":"link","label":"Event emitter","href":"/fresher-training-doc/docs/Topics/event","docId":"Topics/event","unlisted":false},{"type":"link","label":"Singleton","href":"/fresher-training-doc/docs/Topics/singleton","docId":"Topics/singleton","unlisted":false},{"type":"link","label":"State Machine","href":"/fresher-training-doc/docs/Topics/state-machine","docId":"Topics/state-machine","unlisted":false},{"type":"link","label":"Behavior Tree","href":"/fresher-training-doc/docs/Topics/behavior-tree","docId":"Topics/behavior-tree","unlisted":false}]}]},"docs":{"2D Context/animation":{"id":"2D Context/animation","title":"Images and sprite animations","description":"Draw your own images on the canvas and learn how to stretch, scale and rotate them. Use clipping on sprites to create sprite animations. By the end of this tutorial you can draw your own images and animations on the canvas and use them in a game.","sidebar":"tutorialSidebar"},"2D Context/canvas-animation":{"id":"2D Context/canvas-animation","title":"Canvas animation","description":"Create an animation on the HTML5 canvas and make it run smooth, no matter the frame rate. Learn how to apply time and easing functions. By the end of this tutorial, you can create a basic animation with the use JavaScript.","sidebar":"tutorialSidebar"},"2D Context/canvas-setup":{"id":"2D Context/canvas-setup","title":"Set-up an HTML5 canvas","description":"What is an HTML5 canvas?","sidebar":"tutorialSidebar"},"2D Context/game-loop":{"id":"2D Context/game-loop","title":"Game Loop","description":"Create a proper game loop in JavaScript and learn about frame rates. Measure and display fps to see your loop in action. Request animation frames and have your own loop running by the end of this HTML5 game tutorial.","sidebar":"tutorialSidebar"},"2D Context/introduction":{"id":"2D Context/introduction","title":"Introduction","description":"What is an HTML5 game?","sidebar":"tutorialSidebar"},"2D Context/make-a-game":{"id":"2D Context/make-a-game","title":"Let\'s make a game","description":"Let\'s spend some time playing this game:","sidebar":"tutorialSidebar"},"2D Context/physics":{"id":"2D Context/physics","title":"Collision detection and physics","description":"Perform collision detection and react with physics, using JavaScript. Check for overlap between shapes, apply hitboxes and calculate new velocities. Make it more natural with object mass, gravity and restitution. By the end of this tutorial, you\'ll have a basic physics simulation running in your game.","sidebar":"tutorialSidebar"},"2D Context/shapes-paths-text":{"id":"2D Context/shapes-paths-text","title":"Draw shapes, paths and texts","description":"Draw graphics on the HTML5 canvas using shapes and paths. Create rectangles, circles, lines, triangles and more complex shapes using SVG paths. By the end of this tutorial you can draw your own graphics and text on the canvas.","sidebar":"tutorialSidebar"},"program":{"id":"program","title":"Fresher Training Program","description":"2D HTML5 Game","sidebar":"tutorialSidebar"},"Topics/behavior-tree":{"id":"Topics/behavior-tree","title":"Behavior Tree","description":"Key concepts","sidebar":"tutorialSidebar"},"Topics/event":{"id":"Topics/event","title":"Event emitter","description":"Event emitter is a design pattern commonly used in software development to manage communication between different components or objects. In essence, it allows one part of a system to emit events, and other parts to listen for and respond to those events. This pattern decouples the emitter from the listener, making the code more modular, flexible, and scalable.","sidebar":"tutorialSidebar"},"Topics/pool":{"id":"Topics/pool","title":"Object pool","description":"The object pool pattern is a software creational design pattern that uses a set of initialized objects kept ready to use \u2013 a \\"pool\\" \u2013 rather than allocating and destroying them on demand. A client of the pool will request an object from the pool and perform operations on the returned object. When the client has finished, it returns the object to the pool rather than destroying it. This can offer a significant performance boost in situations where the cost of initializing and destroy a class instance and prevent memory fragmentation.","sidebar":"tutorialSidebar"},"Topics/singleton":{"id":"Topics/singleton","title":"Singleton","description":"Definition","sidebar":"tutorialSidebar"},"Topics/state-machine":{"id":"Topics/state-machine","title":"State Machine","description":"A state machine design pattern is a way of designing a system that can be in one of several specific states (modes), with rules for switching between these states. Each state represents a different behavior or action, and the system moves between them based on certain events or conditions. It\u2019s useful for organizing systems that change behavior, like user interfaces or games.","sidebar":"tutorialSidebar"},"Topics/tween":{"id":"Topics/tween","title":"Tween","description":"Tween (short for \\"in-between\\") refers to a technique used to create smooth transitions between values over time. It involves calculating intermediate values between a start and end point to animate properties such as position, size, color, or other attributes of objects.","sidebar":"tutorialSidebar"},"Topics/vector":{"id":"Topics/vector","title":"Vector","description":"What is a vector?","sidebar":"tutorialSidebar"},"WebGL/introduction":{"id":"WebGL/introduction","title":"Introduction","description":"What is this tutorial about?","sidebar":"tutorialSidebar"},"WebGL/webgl-funamentals":{"id":"WebGL/webgl-funamentals","title":"Fundamentals","description":"WebGL (Web Graphics Library) is often thought of as a 3D API. People think \\"I\'ll use WebGL and magic, I\'ll get cool 3d\\". In reality, WebGL is just a rasterization engine. It draws points, lines, and triangles based on code you supply. Getting WebGL to do anything else is up to you to provide code to use points, lines, and triangles to accomplish your task.","sidebar":"tutorialSidebar"},"WebGL/webgl-how-it-works":{"id":"WebGL/webgl-how-it-works","title":"How it works","description":"This tutorial will explain the basic level of what WebGL and your GPU actually do. There are basically 2 parts to this GPU thing. The first part processes vertices (or streams of data) into clip space vertices. The second part draws pixels based on the first part.","sidebar":"tutorialSidebar"},"WebGL/webgl-image-processing":{"id":"WebGL/webgl-image-processing","title":"Image Processing","description":"To draw images in WebGL we need to use textures. Similarly to the way WebGL expects clip space coordinates when rendering instead of pixels, WebGL expects texture coordinates when reading a texture. Texture coordinates go from 0.0 to 1.0 no matter the dimensions of the texture.","sidebar":"tutorialSidebar"}}}}')}}]);