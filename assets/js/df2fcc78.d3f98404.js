"use strict";(self.webpackChunkfresher_training_doc=self.webpackChunkfresher_training_doc||[]).push([[194],{4757:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(4848),i=t(8453);const a={},r="Singleton",o={id:"Topics/singleton",title:"Singleton",description:"Definition",source:"@site/docs/Topics/4.singleton.md",sourceDirName:"Topics",slug:"/Topics/singleton",permalink:"/fresher-training-doc/docs/Topics/singleton",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Topics/4.singleton.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Event emitter",permalink:"/fresher-training-doc/docs/Topics/event"},next:{title:"State Machine",permalink:"/fresher-training-doc/docs/Topics/state-machine"}},c={},l=[{value:"Definition",id:"definition",level:3},{value:"Why not just use static class?",id:"why-not-just-use-static-class",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"singleton",children:"Singleton"})}),"\n",(0,s.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsxs)(n.p,{children:["A singleton is a design pattern that restricts the instantiation of a class to a single instance. This ensures that there is only one object of the class throughout the application, providing a global point of access to it.",(0,s.jsx)("br",{}),"\r\nIt's commonly used in scenarios like managing game state, controlling audio, handling player input, or managing resources like textures and models, where having multiple instances could lead to inconsistencies, conflicts, or unnecessary resource consumption."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'class GameManager {\r\n    private static instance: GameManager;\r\n    private constructor() { }\r\n\r\n    public static getInstance(): GameManager {\r\n        if (!GameManager.instance) {\r\n            GameManager.instance = new GameManager();\r\n        }\r\n        return GameManager.instance;\r\n    }\r\n\r\n    public startGame(): void {\r\n        console.log("Game started");\r\n    }\r\n\r\n    public endGame(): void {\r\n        console.log("Game ended");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"GameManager.getInstance().startGame();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"why-not-just-use-static-class",children:"Why not just use static class?"}),"\n",(0,s.jsx)(n.p,{children:"Both singleton and static class provide a single point of access to their members, but there are important differences that make singletons a better choice in some situations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Instance Control: A singleton allows for more flexibility because it is an instance of a class, meaning you can control when it gets created and destroyed. With static classes, static members exist for the lifetime of the application."}),"\n",(0,s.jsx)(n.li,{children:"Inheritance and Polymorphism: Singletons are classes and can inherit from other classes or implement interfaces, allowing them to take advantage of polymorphism. Static classes cannot inherit from other classes, making them less flexible in object-oriented designs."}),"\n",(0,s.jsx)(n.li,{children:"Lazy Initialization: Singletons can be instantiated lazily, meaning they are only created when needed. Static classes are initialized when the application starts, which can lead to unnecessary resource consumption if the class is never used."}),"\n",(0,s.jsx)(n.li,{children:"etc."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);