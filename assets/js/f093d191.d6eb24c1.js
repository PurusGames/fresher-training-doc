"use strict";(self.webpackChunkfresher_training_doc=self.webpackChunkfresher_training_doc||[]).push([[882],{9702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var r=n(4848),a=n(8453);const s={},i="State Machine",c={id:"Topics/state-machine",title:"State Machine",description:"A state machine design pattern is a way of designing a system that can be in one of several specific states (modes), with rules for switching between these states. Each state represents a different behavior or action, and the system moves between them based on certain events or conditions. It\u2019s useful for organizing systems that change behavior, like user interfaces or games.",source:"@site/docs/Topics/5.state-machine.md",sourceDirName:"Topics",slug:"/Topics/state-machine",permalink:"/fresher-training-doc/docs/Topics/state-machine",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Topics/5.state-machine.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Singleton",permalink:"/fresher-training-doc/docs/Topics/singleton"}},o={},h=[{value:"State Machine Pattern",id:"state-machine-pattern",level:3},{value:"Weapon System",id:"weapon-system",level:3}];function d(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"state-machine",children:"State Machine"})}),"\n",(0,r.jsx)(t.p,{children:"A state machine design pattern is a way of designing a system that can be in one of several specific states (modes), with rules for switching between these states. Each state represents a different behavior or action, and the system moves between them based on certain events or conditions. It\u2019s useful for organizing systems that change behavior, like user interfaces or games."}),"\n",(0,r.jsx)(t.h3,{id:"state-machine-pattern",children:"State Machine Pattern"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"interface State {\r\n    enter(): void;\r\n    exit(): void;\r\n    update(dt: number): State;\r\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class StateMachine {\r\n    private currentState: State;\r\n\r\n    constructor(initialState: State) {\r\n        this.currentState = initialState;\r\n        this.currentState.enter();\r\n    }\r\n\r\n    public changeState(newState: State): void {\r\n        this.currentState.exit();\r\n        this.currentState = newState;\r\n        this.currentState.enter();\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        var state = this.currentState.update(dt);\r\n        \r\n        // if the state changes, change the current state\r\n        if (state && state !== this.currentState) {\r\n            this.changeState(state);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["We have a ",(0,r.jsx)(t.code,{children:"StateMachine"})," class that manages the current state of the system. It has methods to change the state and update the current state. The ",(0,r.jsx)(t.code,{children:"State"})," interface defines the methods that each state must implement."]}),"\n",(0,r.jsx)(t.p,{children:"Let's implement an example using the state machine pattern."}),"\n",(0,r.jsx)(t.h3,{id:"weapon-system",children:"Weapon System"}),"\n",(0,r.jsxs)(t.p,{children:["A weapon can have different states like ",(0,r.jsx)(t.code,{children:"Idle"}),", ",(0,r.jsx)(t.code,{children:"Firing"}),", ",(0,r.jsx)(t.code,{children:"Reloading"}),", etc. We need a state machine to manage these states."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Weapon {\r\n    public fireRate: number; // shots per second\r\n    public reloadTime: number; // seconds\r\n    public magazineSize: number;\r\n    public currentAmmo: number;\r\n    \r\n    private stateMachine: StateMachine;\r\n\r\n    constructor() {\r\n        this.stateMachine = new StateMachine(new IdleState(this));\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        this.stateMachine.update(dt);\r\n    }\r\n    \r\n    public spawnBullets(): void {\r\n        // spawn the bullet(s)\r\n        // this method can be also a state\r\n    }\r\n    \r\n    public startFiring(): void {\r\n        this.stateMachine.changeState(new FiringState(this));\r\n    }\r\n    \r\n    public stopFiring(): void {\r\n        this.stateMachine.changeState(new IdleState(this));\r\n    }\r\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Each state of the weapon system will implement the ",(0,r.jsx)(t.code,{children:"State"})," interface, anh they should have a reference to the weapon object. So, we need a ",(0,r.jsx)(t.code,{children:"WeaponState"})," class for all the states to extend."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class WeaponState implements State {\r\n    protected weapon: Weapon;\r\n\r\n    constructor(weapon: Weapon) {\r\n        this.weapon = weapon;\r\n    }\r\n\r\n    public enter(): void { }\r\n    public exit(): void { }\r\n    public update(dt: number): State { }\r\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Let's define the states."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'class IdleState extends WeaponState {\r\n    public enter(): void {\r\n        console.log("Weapon is idle");\r\n    }\r\n    \r\n    \r\n    public update(dt: number): State {\r\n        // do nothing\r\n        return this;\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'class FiringState extends WeaponState {\r\n    private timeSinceLastShot: number;\r\n\r\n    constructor(weapon: Weapon) {\r\n        super(weapon);\r\n        this.timeSinceLastShot = 0;\r\n    }\r\n\r\n    public enter(): void {\r\n        console.log("Weapon is firing");\r\n    }\r\n\r\n    public update(dt: number): State {\r\n        this.timeSinceLastShot += dt;\r\n        if (this.timeSinceLastShot >= 1 / this.weapon.fireRate) {\r\n            this.weapon.currentAmmo--;\r\n            this.timeSinceLastShot = 0;\r\n            weapon.spawnBullets();\r\n            \r\n            // out of ammo, go to reloading state\r\n            if (this.weapon.currentAmmo <= 0) {\r\n                return new ReloadingState(this.weapon);\r\n            }\r\n        }\r\n        \r\n        // still firing\r\n        return this;\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'class ReloadingState extends WeaponState {\r\n    private timeSinceReload: number;\r\n\r\n    constructor(weapon: Weapon) {\r\n        super(weapon);\r\n        this.timeSinceReload = 0;\r\n    }\r\n\r\n    public enter(): void {\r\n        console.log("Weapon is reloading");\r\n    }\r\n\r\n    public update(dt: number): State {\r\n        this.timeSinceReload += dt;\r\n        if (this.timeSinceReload >= this.weapon.reloadTime) {\r\n            this.weapon.currentAmmo = this.weapon.magazineSize;\r\n            return new FiringState(this.weapon);\r\n        }\r\n        \r\n        return this;\r\n    }\r\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Now we have a weapon system that automatically fires bullets after calling ",(0,r.jsx)(t.code,{children:"Weapon.startFiring()"}),". It will reload when out of ammo and start firing again until ",(0,r.jsx)(t.code,{children:"Weapon.stopFiring()"})," is called."]}),"\n",(0,r.jsx)(t.p,{children:"All the logic for each state is encapsulated in the state class, making it easier to manage and extend the system."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);